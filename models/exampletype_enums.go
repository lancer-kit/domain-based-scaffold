// generated by goplater -type=ExampleType; DO NOT EDIT
package models

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stub usage of json for situation when
	// (Un)MarshalJSON methods will be omitted
	_ = json.Delim('s')

	// stub usage of sql/driver for situation when
	// Scan/Value methods will be omitted
	_ = driver.Bool
	_ = sql.LevelDefault
}

var ErrExampleTypeInvalid = errors.New("ExampleType is invalid")

func init() {
	var v ExampleType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		defExampleTypeNameToValue = map[string]ExampleType{
			interface{}(ExampleTypeA).(fmt.Stringer).String(): ExampleTypeA,
			interface{}(ExampleTypeB).(fmt.Stringer).String(): ExampleTypeB,
			interface{}(ExampleTypeC).(fmt.Stringer).String(): ExampleTypeC,
			interface{}(ExampleTypeD).(fmt.Stringer).String(): ExampleTypeD,
		}
	}
}

var defExampleTypeNameToValue = map[string]ExampleType{
	"ExampleTypeA": ExampleTypeA,
	"ExampleTypeB": ExampleTypeB,
	"ExampleTypeC": ExampleTypeC,
	"ExampleTypeD": ExampleTypeD,
}

var defExampleTypeValueToName = map[ExampleType]string{
	ExampleTypeA: "ExampleTypeA",
	ExampleTypeB: "ExampleTypeB",
	ExampleTypeC: "ExampleTypeC",
	ExampleTypeD: "ExampleTypeD",
}

// String is generated so ExampleType satisfies fmt.Stringer.
func (r ExampleType) String() string {
	s, ok := defExampleTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("ExampleType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for ExampleType.
func (r ExampleType) Validate() error {
	_, ok := defExampleTypeValueToName[r]
	if !ok {
		return ErrExampleTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so ExampleType satisfies json.Marshaler.
func (r ExampleType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defExampleTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("ExampleType(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ExampleType satisfies json.Unmarshaler.
func (r *ExampleType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ExampleType: should be a string, got %s", string(data))
	}
	v, ok := defExampleTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("ExampleType(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so ExampleType satisfies db row driver.Valuer.
func (r ExampleType) Value() (driver.Value, error) {
	j, err := json.Marshal(r)
	return j, err
}

// Value is generated so ExampleType satisfies db row driver.Scanner.
func (r *ExampleType) Scan(src interface{}) error {
	switch src.(type) {
	case string:
		val, ok := defExampleTypeNameToValue[src.(string)]
		if !ok {
			return errors.New("ExampleType: can't unmarshal column data")
		}
		*r = val
		return nil
	case []byte:
		source := src.([]byte)
		var i ExampleType
		err := json.Unmarshal(source, &i)
		if err != nil {
			return errors.New("ExampleType: can't unmarshal column data")
		}

		*r = i
		return nil
	case int, int8, int32, int64, uint, uint8, uint32, uint64:
		ni := sql.NullInt64{}
		err := ni.Scan(src)
		if err != nil {
			return errors.New("ExampleType: can't scan column data into int64")
		}

		*r = ExampleType(ni.Int64)
		return nil
	}
	return errors.New("ExampleType: invalid type")
}
